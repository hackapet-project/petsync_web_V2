services:
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    # Port mapping removed - Coolify handles port allocation automatically
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    labels:
      - "coolify.main=true"
      - "coolify.port=3000"

  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    # Port mapping removed - Coolify handles port allocation automatically
    expose:
      - "8000"
    environment:
      - PYTHONUNBUFFERED=1
      - DJANGO_SETTINGS_MODULE=core.settings
      - PYTHONPATH=/opt/workdir
      - DATABASE_URL=${DATABASE_URL:-postgresql://petsync_user:petsync_dev_password_123@db:5432/petsync_db}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-django-insecure-dev-key-change-in-production-123456789}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-*}
      - DJANGO_FORCE_HTTPS=${DJANGO_FORCE_HTTPS:-False}
      - DJANGO_ENV=${DJANGO_ENV:-production}
      - FORCE_REBUILD=1
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "coolify.service=web"
      - "coolify.port=8000"
    restart: unless-stopped
    volumes:
      - static_volume:/opt/workdir/staticfiles

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-petsync_db}
      - POSTGRES_USER=${POSTGRES_USER:-petsync_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-petsync_dev_password_123}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-petsync_user} -d ${POSTGRES_DB:-petsync_db} -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
